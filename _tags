# OASIS_START
# DO NOT EDIT (digest: 9e44bbf54f10496ffea69f56d308cdb1)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library apak
"apak/apak.cmxs": use_apak
"apak/disjointSet.cmx": for-pack(Apak)
"apak/dll.cmx": for-pack(Apak)
"apak/enumeration.cmx": for-pack(Apak)
"apak/evalLink.cmx": for-pack(Apak)
"apak/extGraph.cmx": for-pack(Apak)
"apak/fixpoint.cmx": for-pack(Apak)
"apak/ka.cmx": for-pack(Apak)
"apak/lattice.cmx": for-pack(Apak)
"apak/log.cmx": for-pack(Apak)
"apak/loop.cmx": for-pack(Apak)
"apak/memo.cmx": for-pack(Apak)
"apak/monoid.cmx": for-pack(Apak)
"apak/pathexp.cmx": for-pack(Apak)
"apak/persistent.cmx": for-pack(Apak)
"apak/recGraph.cmx": for-pack(Apak)
"apak/semilattice.cmx": for-pack(Apak)
"apak/sese.cmx": for-pack(Apak)
"apak/sig.cmx": for-pack(Apak)
"apak/tagged.cmx": for-pack(Apak)
"apak/putil.cmx": for-pack(Apak)
# Executable test_apak
"apak/unit_test.byte": pkg_batteries
"apak/unit_test.byte": pkg_deriving
"apak/unit_test.byte": pkg_deriving.syntax
"apak/unit_test.byte": pkg_oUnit
"apak/unit_test.byte": pkg_ocamlgraph
<apak/*.ml{,i}>: pkg_batteries
<apak/*.ml{,i}>: pkg_deriving
<apak/*.ml{,i}>: pkg_deriving.syntax
<apak/*.ml{,i}>: pkg_oUnit
<apak/*.ml{,i}>: pkg_ocamlgraph
# Library ark
"ark/ark.cmxs": use_ark
"ark/arkPervasives.cmx": for-pack(Ark)
"ark/formula.cmx": for-pack(Ark)
"ark/linear.cmx": for-pack(Ark)
"ark/numDomain.cmx": for-pack(Ark)
"ark/smt.cmx": for-pack(Ark)
"ark/term.cmx": for-pack(Ark)
"ark/transition.cmx": for-pack(Ark)
"ark/hset.cmx": for-pack(Ark)
"ark/hashcons.cmx": for-pack(Ark)
"ark/hmap.cmx": for-pack(Ark)
# Executable test_ark
"ark/test.native": pkg_Z3
"ark/test.native": pkg_apron
"ark/test.native": pkg_apron.boxMPQ
"ark/test.native": pkg_apron.octMPQ
"ark/test.native": pkg_apron.polkaMPQ
"ark/test.native": pkg_batteries
"ark/test.native": pkg_camlidl
"ark/test.native": pkg_deriving
"ark/test.native": pkg_deriving.syntax
"ark/test.native": pkg_gmp
"ark/test.native": pkg_oUnit
"ark/test.native": pkg_ocamlgraph
"ark/test.native": use_apak
<ark/*.ml{,i}>: pkg_Z3
<ark/*.ml{,i}>: pkg_apron
<ark/*.ml{,i}>: pkg_apron.boxMPQ
<ark/*.ml{,i}>: pkg_apron.octMPQ
<ark/*.ml{,i}>: pkg_apron.polkaMPQ
<ark/*.ml{,i}>: pkg_batteries
<ark/*.ml{,i}>: pkg_camlidl
<ark/*.ml{,i}>: pkg_deriving
<ark/*.ml{,i}>: pkg_deriving.syntax
<ark/*.ml{,i}>: pkg_gmp
<ark/*.ml{,i}>: pkg_oUnit
<ark/*.ml{,i}>: pkg_ocamlgraph
<ark/*.ml{,i}>: use_apak
# Executable duet
"duet/src/duet.native": pkg_Z3
"duet/src/duet.native": pkg_apron
"duet/src/duet.native": pkg_apron.boxMPQ
"duet/src/duet.native": pkg_apron.octMPQ
"duet/src/duet.native": pkg_apron.polkaMPQ
"duet/src/duet.native": pkg_batteries
"duet/src/duet.native": pkg_camlidl
"duet/src/duet.native": pkg_cil
"duet/src/duet.native": pkg_deriving
"duet/src/duet.native": pkg_deriving.syntax
"duet/src/duet.native": pkg_gmp
"duet/src/duet.native": pkg_ocamlgraph
"duet/src/duet.native": use_apak
"duet/src/duet.native": use_ark
<duet/src/*.ml{,i}>: pkg_Z3
<duet/src/*.ml{,i}>: pkg_apron
<duet/src/*.ml{,i}>: pkg_apron.boxMPQ
<duet/src/*.ml{,i}>: pkg_apron.octMPQ
<duet/src/*.ml{,i}>: pkg_apron.polkaMPQ
<duet/src/*.ml{,i}>: pkg_batteries
<duet/src/*.ml{,i}>: pkg_camlidl
<duet/src/*.ml{,i}>: pkg_cil
<duet/src/*.ml{,i}>: pkg_deriving
<duet/src/*.ml{,i}>: pkg_deriving.syntax
<duet/src/*.ml{,i}>: pkg_gmp
<duet/src/*.ml{,i}>: pkg_ocamlgraph
<duet/src/*.ml{,i}>: use_apak
<duet/src/*.ml{,i}>: use_ark
# OASIS_STOP
"lib": not_hygienic
