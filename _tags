# OASIS_START
# DO NOT EDIT (digest: e0e019fb8deffee304b582921a6e360b)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library apak
"apak/apak.cmxs": use_apak
"apak/disjointSet.cmx": for-pack(Apak)
"apak/dll.cmx": for-pack(Apak)
"apak/enumeration.cmx": for-pack(Apak)
"apak/evalLink.cmx": for-pack(Apak)
"apak/extGraph.cmx": for-pack(Apak)
"apak/fixpoint.cmx": for-pack(Apak)
"apak/ka.cmx": for-pack(Apak)
"apak/lattice.cmx": for-pack(Apak)
"apak/log.cmx": for-pack(Apak)
"apak/loop.cmx": for-pack(Apak)
"apak/memo.cmx": for-pack(Apak)
"apak/monoid.cmx": for-pack(Apak)
"apak/pathexp.cmx": for-pack(Apak)
"apak/persistent.cmx": for-pack(Apak)
"apak/recGraph.cmx": for-pack(Apak)
"apak/semilattice.cmx": for-pack(Apak)
"apak/sese.cmx": for-pack(Apak)
"apak/sig.cmx": for-pack(Apak)
"apak/tagged.cmx": for-pack(Apak)
"apak/putil.cmx": for-pack(Apak)
# Executable test_apak
"apak/test_apak.byte": pkg_batteries
"apak/test_apak.byte": pkg_oUnit
"apak/test_apak.byte": pkg_ocamlgraph
"apak/test_apak.byte": pkg_ppx_deriving
"apak/test_apak.byte": pkg_ppx_deriving.ord
"apak/test_apak.byte": pkg_ppx_deriving.show
<apak/*.ml{,i,y}>: pkg_batteries
<apak/*.ml{,i,y}>: pkg_oUnit
<apak/*.ml{,i,y}>: pkg_ocamlgraph
<apak/*.ml{,i,y}>: pkg_ppx_deriving
<apak/*.ml{,i,y}>: pkg_ppx_deriving.ord
<apak/*.ml{,i,y}>: pkg_ppx_deriving.show
# Library ark
"ark/ark.cmxs": use_ark
"ark/qQ.cmx": for-pack(Ark)
"ark/zZ.cmx": for-pack(Ark)
"ark/syntax.cmx": for-pack(Ark)
"ark/interval.cmx": for-pack(Ark)
"ark/smt.cmx": for-pack(Ark)
"ark/arkZ3.cmx": for-pack(Ark)
"ark/arkMathsat.cmx": for-pack(Ark)
"ark/linear.cmx": for-pack(Ark)
"ark/polynomial.cmx": for-pack(Ark)
"ark/interpretation.cmx": for-pack(Ark)
"ark/arkApron.cmx": for-pack(Ark)
"ark/polyhedron.cmx": for-pack(Ark)
"ark/arkSimplify.cmx": for-pack(Ark)
"ark/abstract.cmx": for-pack(Ark)
"ark/nonlinear.cmx": for-pack(Ark)
"ark/coordinateSystem.cmx": for-pack(Ark)
"ark/wedge.cmx": for-pack(Ark)
"ark/quantifier.cmx": for-pack(Ark)
"ark/iteration.cmx": for-pack(Ark)
"ark/transition.cmx": for-pack(Ark)
"ark/bigO.cmx": for-pack(Ark)
# Executable test_ark
"ark/test_ark.native": pkg_Z3
"ark/test_ark.native": pkg_apron
"ark/test_ark.native": pkg_apron.boxMPQ
"ark/test_ark.native": pkg_apron.octMPQ
"ark/test_ark.native": pkg_apron.polkaMPQ
"ark/test_ark.native": pkg_batteries
"ark/test_ark.native": pkg_camlidl
"ark/test_ark.native": pkg_gmp
"ark/test_ark.native": pkg_mathsat
"ark/test_ark.native": pkg_oUnit
"ark/test_ark.native": pkg_ocamlgraph
"ark/test_ark.native": pkg_ocrs
"ark/test_ark.native": pkg_ppx_deriving
"ark/test_ark.native": pkg_ppx_deriving.ord
"ark/test_ark.native": pkg_ppx_deriving.show
"ark/test_ark.native": use_apak
<ark/*.ml{,i,y}>: pkg_oUnit
# Executable arktop
"ark/arkTop.native": pkg_Z3
"ark/arkTop.native": pkg_apron
"ark/arkTop.native": pkg_apron.boxMPQ
"ark/arkTop.native": pkg_apron.octMPQ
"ark/arkTop.native": pkg_apron.polkaMPQ
"ark/arkTop.native": pkg_batteries
"ark/arkTop.native": pkg_camlidl
"ark/arkTop.native": pkg_gmp
"ark/arkTop.native": pkg_mathsat
"ark/arkTop.native": pkg_ocamlgraph
"ark/arkTop.native": pkg_ocrs
"ark/arkTop.native": pkg_ppx_deriving
"ark/arkTop.native": pkg_ppx_deriving.ord
"ark/arkTop.native": pkg_ppx_deriving.show
"ark/arkTop.native": use_apak
<ark/*.ml{,i,y}>: pkg_Z3
<ark/*.ml{,i,y}>: pkg_apron
<ark/*.ml{,i,y}>: pkg_apron.boxMPQ
<ark/*.ml{,i,y}>: pkg_apron.octMPQ
<ark/*.ml{,i,y}>: pkg_apron.polkaMPQ
<ark/*.ml{,i,y}>: pkg_batteries
<ark/*.ml{,i,y}>: pkg_camlidl
<ark/*.ml{,i,y}>: pkg_gmp
<ark/*.ml{,i,y}>: pkg_mathsat
<ark/*.ml{,i,y}>: pkg_ocamlgraph
<ark/*.ml{,i,y}>: pkg_ocrs
<ark/*.ml{,i,y}>: pkg_ppx_deriving
<ark/*.ml{,i,y}>: pkg_ppx_deriving.ord
<ark/*.ml{,i,y}>: pkg_ppx_deriving.show
<ark/*.ml{,i,y}>: use_apak
# Library pa
"pa/pa.cmxs": use_pa
"pa/paSmt.cmx": for-pack(Pa)
"pa/paFormula.cmx": for-pack(Pa)
"pa/struct.cmx": for-pack(Pa)
"pa/predicateAutomata.cmx": for-pack(Pa)
<pa/*.ml{,i,y}>: pkg_Z3
<pa/*.ml{,i,y}>: pkg_batteries
<pa/*.ml{,i,y}>: pkg_ocamlgraph
<pa/*.ml{,i,y}>: pkg_ppx_deriving
<pa/*.ml{,i,y}>: pkg_ppx_deriving.ord
<pa/*.ml{,i,y}>: pkg_ppx_deriving.show
<pa/*.ml{,i,y}>: use_apak
# Executable test_patools
"patools/test_patools.native": pkg_Z3
"patools/test_patools.native": pkg_batteries
"patools/test_patools.native": pkg_oUnit
"patools/test_patools.native": pkg_ocamlgraph
"patools/test_patools.native": pkg_ppx_deriving
"patools/test_patools.native": pkg_ppx_deriving.ord
"patools/test_patools.native": pkg_ppx_deriving.show
"patools/test_patools.native": use_apak
"patools/test_patools.native": use_pa
<patools/*.ml{,i,y}>: pkg_oUnit
# Executable patools
<patools/*.ml{,i,y}>: oasis_executable_patools_ccopt
"patools/patools.native": pkg_Z3
"patools/patools.native": pkg_batteries
"patools/patools.native": pkg_ocamlgraph
"patools/patools.native": pkg_ppx_deriving
"patools/patools.native": pkg_ppx_deriving.ord
"patools/patools.native": pkg_ppx_deriving.show
"patools/patools.native": use_apak
"patools/patools.native": use_pa
<patools/*.ml{,i,y}>: pkg_Z3
<patools/*.ml{,i,y}>: pkg_batteries
<patools/*.ml{,i,y}>: pkg_ocamlgraph
<patools/*.ml{,i,y}>: pkg_ppx_deriving
<patools/*.ml{,i,y}>: pkg_ppx_deriving.ord
<patools/*.ml{,i,y}>: pkg_ppx_deriving.show
<patools/*.ml{,i,y}>: use_apak
<patools/*.ml{,i,y}>: use_pa
# Executable duet
"duet/duet.native": pkg_Z3
"duet/duet.native": pkg_apron
"duet/duet.native": pkg_apron.boxMPQ
"duet/duet.native": pkg_apron.octMPQ
"duet/duet.native": pkg_apron.polkaMPQ
"duet/duet.native": pkg_batteries
"duet/duet.native": pkg_camlidl
"duet/duet.native": pkg_cil
"duet/duet.native": pkg_cil.default-features
"duet/duet.native": pkg_gmp
"duet/duet.native": pkg_mathsat
"duet/duet.native": pkg_ocamlgraph
"duet/duet.native": pkg_ocrs
"duet/duet.native": pkg_ppx_deriving
"duet/duet.native": pkg_ppx_deriving.ord
"duet/duet.native": pkg_ppx_deriving.show
"duet/duet.native": use_apak
"duet/duet.native": use_ark
"duet/duet.native": use_pa
<duet/*.ml{,i,y}>: pkg_Z3
<duet/*.ml{,i,y}>: pkg_apron
<duet/*.ml{,i,y}>: pkg_apron.boxMPQ
<duet/*.ml{,i,y}>: pkg_apron.octMPQ
<duet/*.ml{,i,y}>: pkg_apron.polkaMPQ
<duet/*.ml{,i,y}>: pkg_batteries
<duet/*.ml{,i,y}>: pkg_camlidl
<duet/*.ml{,i,y}>: pkg_cil
<duet/*.ml{,i,y}>: pkg_cil.default-features
<duet/*.ml{,i,y}>: pkg_gmp
<duet/*.ml{,i,y}>: pkg_mathsat
<duet/*.ml{,i,y}>: pkg_ocamlgraph
<duet/*.ml{,i,y}>: pkg_ocrs
<duet/*.ml{,i,y}>: pkg_ppx_deriving
<duet/*.ml{,i,y}>: pkg_ppx_deriving.ord
<duet/*.ml{,i,y}>: pkg_ppx_deriving.show
<duet/*.ml{,i,y}>: use_apak
<duet/*.ml{,i,y}>: use_ark
<duet/*.ml{,i,y}>: use_pa
# OASIS_STOP
"lib": not_hygienic
true: use_menhir
